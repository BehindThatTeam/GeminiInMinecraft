plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

def mcVersions = ['1.21.4', '1.21.5']
def selectedMcVersion = project.hasProperty('mcver') ? project.property('mcver') : mcVersions[0]

if (!mcVersions.contains(selectedMcVersion)) {
	throw new GradleException("Unsupported Minecraft version. Supported versions: ${mcVersions.join(', ')}")
}

test {
	enabled = false
}

version = project.mod_version
group = project.maven_group
base {
	archivesName = project.archives_base_name
}

repositories {}

loom {
	splitEnvironmentSourceSets()
	mods {
		"geminiinminecraft" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${selectedMcVersion}"

	def yarnMappings = selectedMcVersion == '1.21.4' ? '1.21.4+build.8' : '1.21.5-rc2+build.1'
	def loaderVersion = "0.16.10"
	def fabricApiVersion = selectedMcVersion == '1.21.4' ? '0.118.0' : '0.119.0'

	mappings "net.fabricmc:yarn:${yarnMappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${loaderVersion}"

	implementation 'com.google.code.gson:gson:2.10.1'

	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}+${selectedMcVersion}"
	modImplementation "net.fabricmc.fabric-api:fabric-command-api-v2:${fabricApiVersion}+${selectedMcVersion}"
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", selectedMcVersion

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version,
				"minecraft_version": selectedMcVersion
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {}
}